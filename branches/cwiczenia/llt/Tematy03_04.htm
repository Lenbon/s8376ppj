<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-2">
  <meta name="Author" content="TLL">
  <meta name="GENERATOR" content="Microsoft FrontPage 5.0">
  <title>GUI 03_04</title>
</head>
<body>
<b><font size="+1">Klasy abstrakcyjne, interfejsy</font></b><b><font
 size="+1"><br>
</font></b><b><u><br>
<br>
Zadanie 5</u> (3p)</b>
<p><b>Zaprojektowaæ </b><b>klasê abstrakcyjn± </b>Figura<i> </i><b>oraz
klasy </b>Kolo<b>, </b>Prostokat<b>:</b>
</p>
<p><b>Klasa abstrakcyjna </b>Figura<b>:</b>
<br>
<b>&nbsp;&nbsp;&nbsp; Pola: &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; </b>protected
int x, y<b>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // po³o¿enie figury</b>
<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </b>protected String fig =
"Jeszcze nie wiadomo";<i>&nbsp;</i><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; // nazwa figury z warto¶ci± pocz±tkow±</b>
<br>
<b>&nbsp;&nbsp;&nbsp; Konstruktor: </b>public
Figura(int x, int
y)<span style="font-style: italic;">&nbsp;</span><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // konstruowanie
figury na podstawie
podanego po³o¿enia</b>
<br>
<b>&nbsp;&nbsp;&nbsp; Metoda:</b> public void pokaz()<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; //&nbsp; wypisuje nazwê figury i
po³o¿enie</b>
<br>
<b>&nbsp;&nbsp;&nbsp; Metoda abstrakcyjna: </b>public abstract void
pozycja(int x, int y)<b>&nbsp; //&nbsp; wypisuje komunikat, czy punkt </b>(x,
y)<b> znajduje siê wewn±trz figury</b>
</p>
<p><b>Klasy </b>Kolo<b>, </b>Prostokat<b> rozszerzaj±
klasê
</b>Figura<b>:</b>
</p>
<p>Kolo<b>:</b>
<br>
<b>&nbsp;&nbsp;&nbsp; Dodatkowe pole: </b>private int promien;
<br>
<b>&nbsp;&nbsp;&nbsp; Konstruktor: </b>public Kolo(int x, int y,
int r)<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // konstruowanie ko³a o ¶rodku w
punkcie </b>(x, y)<b> i&nbsp;
promieniu
</b>r
<br>
<b>&nbsp;&nbsp;&nbsp; Implementacja metody abstrakcyjnej: </b>public
void pozycja(int x, int y)
<br>
<b>&nbsp;&nbsp;&nbsp; Przedefiniowanie metody: </b>public void
pokaz()<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp; // wypisuje dodatkowo promieñ ko³a</b>
</p>
<p>Prostokat<b>:</b>
<br>
<b>&nbsp;&nbsp;&nbsp; Dodatkowe pola: </b>private int szer, wys;<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; // szeroko¶æ i wysoko¶æ prostok±ta</b>
<br>
<b>&nbsp;&nbsp;&nbsp; Konstruktor: </b>public Prostokat(int x, int
y, int s, int w)<b>&nbsp;&nbsp;&nbsp;&nbsp; // konstruowanie prostok±ta
(o bokach
równoleg³ych do osi uk³adu wspó³rzêdnych)<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; // z podanym
po³o¿eniem
lewego</b> <b>górnego wierzcho³ka </b>(x, y)<b>, szeroko¶ci± </b>s<i>,</i><b>
wysoko¶ci± </b>w
<br>
<b>&nbsp;&nbsp;&nbsp; Implementacja metody abstrakcyjnej: </b>public
void pozycja(int x, int y)
<br>
<b>&nbsp;&nbsp;&nbsp; Przedefiniowanie metody: </b>public void
pokaz()<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// wypisuje dodatkowo parametry </b>szer<b>, </b>wys
</p>
<span style="font-weight: bold;">Stworzyæ w/w klasy w taki sposób, aby
nastêpuj±cy program</span><br>
<br>
public class TestFigur {<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public static void main(String[] args)<br>
&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Figura fig[] = new Figura[2];<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; fig[0] = new Kolo(200, 200, 50);<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; fig[1] = new Prostokat(200, 200,
50, 50);<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; //
polimorficzne wywo³anie metody pokaz() z klas Kolo/Prostokat, <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // a nie z
klasy Figura<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; for (Figura f : fig){<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; f.pokaz();<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
System.out.println();<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; fig[0].pozycja(200,
200);&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; fig[1].pozycja(210, 300);<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; }<br>
}<br>
<p><span style="font-weight: bold;">wyprowadzi³ na konsolê poni¿sze
wyniki:</span>
</p>
Kolo<br>
Srodek - (200, 200)<br>
Promien - 50<br>
<br>
Prostokat<br>
Lewy gorny - (200, 200)<br>
Szerokosc: 50, Wysokosc: 50<br>
<br>
Punkt (200, 200) znajduje sie wewnatrz kola<br>
<br>
Punkt (210, 300) znajduje sie na zewnatrz prostokata<br>
<br>
<br>
<b><u>Zadanie 6</u></b> <span style="font-weight: bold;">(1p)</span><br>
<b>(Rozbudowaæ zadanie 5)</b><b><br>
<br>
Zdefiniowaæ interfejs </b>Obliczenie<b> zawieraj±cy metody </b><b>obliczaj±ce
pole i obwód figury. </b><b>Zaimplementowaæ interfejs </b>Obliczenie
<b>w klasach </b>Figura<i>, </i>Kolo<b>,
</b>Prostokat<b> oraz testowaæ wszystkie metody.</b><br>
<br>
<br>
<b><u>Zadanie 7</u></b> <span style="font-weight: bold;">(2p)</span><br>
<b>(Rozbudowaæ zadania 5-6)</b><b><br>
<br>
</b><span style="font-weight: bold;">Zaimplementowaæ interfejs </span>java.lang.Comparable<span
 style="font-weight: bold;"> <span style="font-family: monospace;"></span></span><code></code><b>(zob.
dokumentacjê Javy) w
klasach </b>Punkt<b>, </b>Odcinek<b> (z zad. 2), </b>Figura<b> (z
zad. 5-6) czyni±c obiekty tych¿e klas </b>porównywalnymi<b> wed³ug
nastêpuj±cych </b><b>kryteriów uporz±dkowania:<br>
</b><b>&nbsp;&nbsp;&nbsp; a. w¶ród punktów </b><b>porównujemy ich
odleg³o¶ci do punktu </b>(0,0)<b>,<br>
</b><b>&nbsp;&nbsp;&nbsp; b. w¶ród odcinków </b><span
 style="font-style: italic;"></span><b>porównujemy
ich d³ugo¶ci,</b><br>
<b>&nbsp;&nbsp;&nbsp; c. w¶ród figur </b><span
 style="font-style: italic;"></span><b>porównujemy
najpierw warto¶ci pola, w dalszej kolejno¶ci warto¶ci
obwodu.<br>
<br>
Testuj±c zadanie mo¿na skorzystaæ z klas kolekcyjnych. <a
 href="kod/FigPktOdc.java">Podana</a> klasa testuj±ca powinna daæ
poni¿sze wyniki:<br>
</b><b><br>
</b>Punkty przed sortowaniem: (3,4) (0,0) (2,3) (4,0) <br>
Punkty po sortowaniu:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (0,0)
(2,3) (4,0) (3,4) <br>
-----<br>
Odcinki przed sortowaniem: (3,4)-(4,0) (3,4)-(0,0) (2,3)-(4,0) <br>
Odcinki po sortowaniu:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(2,3)-(4,0) (3,4)-(4,0) (3,4)-(0,0) <br>
-----<br>
Figury przed sortowaniem: <br>
Prostokat: (1,1) 4,9<br>
Kolo: (1,1), 5<br>
Prostokat: (2,2) 6,6<br>
<br>
Figury po sortowaniu:&nbsp;&nbsp;&nbsp;&nbsp; <br>
Prostokat: (2,2) 6,6<br>
Prostokat: (1,1) 4,9<br>
Kolo: (1,1), 5<br>
<br>
<br>
<b><u>Zadanie 8</u></b> <span style="font-weight: bold;">(4p)</span><br>
<span style="font-weight: bold;">(Zastosowanie interfejsu </span>java.lang.Iterable<span
 style="font-weight: bold;">, zob. wyk³ad GUI)<br>
<br>
</span><span style="font-weight: bold;"></span><span
 style="font-weight: bold;"></span><span style="font-weight: bold;">Nie
korzystaj±c z kolekcji ani z tablic </span><span
 style="font-weight: bold;">zaprojektowaæ klasê </span>IterPlik<span
 style="font-weight: bold;">, reprezetuj±c± pliki tekstowe. </span><span
 style="font-weight: bold;">Klasa </span>IterPlik<span
 style="font-weight: bold;"> powinna umo¿liwiaæ </span><span
 style="font-weight: bold;">iterowanie po wierszach pliku </span><span
 style="font-weight: bold;">stosuj±c instrukcjê </span>for-each<span
 style="font-weight: bold;"></span><span style="font-weight: bold;">. </span><span
 style="font-weight: bold;">Stworzyæ klasê w taki sposób, aby dla
podanego <a href="kod/tekst.txt">pliku</a> wej¶ciowego nastêpuj±cy
program</span><br>
<span style="font-weight: bold;"></span><span style="font-weight: bold;"><br>
</span>class TestIterPlik {<br>
&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public static void main(String[] args)<br>
&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; IterPlik plik = new
IterPlik("tekst.txt");&nbsp;&nbsp;&nbsp; // plik tekstowy<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // iteracja po
wierszach pliku<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // domyslnie
zaczynajac od pierwszego wiersza<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // i z krokiem
iteracji = 1<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; for (String wiersz:
plik)&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
System.out.print(wiersz + "&nbsp; ");<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println();<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
plik.poczatek(2);&nbsp;&nbsp;&nbsp; // ustalenie poczatku iteracji (tu:
2-gi wiersz)<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // iteracja od
ustalonego wiersza<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; for (String wiersz:
plik)&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
System.out.print(wiersz + "&nbsp; ");<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println();<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; plik.krok(3);&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; // ustalenie kroku iteracji (tu: co 3-ci wiersz)<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // iteracja po
wierszach pliku, <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // od
ustalonego wiersza, z okreslonym krokiem<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; for (String wiersz:
plik)&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
System.out.print(wiersz + "&nbsp; ");<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; System.out.println();<br>
&nbsp;&nbsp;&nbsp; }<br>
}<span style="font-weight: bold;"><br>
</span><span style="font-weight: bold;"><br>
wyprowadzi³ na konsolê poni¿sze
wyniki:<br>
<br>
</span>a&nbsp; b&nbsp; c&nbsp; d&nbsp; e&nbsp; f&nbsp; g&nbsp; h&nbsp;
i&nbsp; j&nbsp; k&nbsp; l&nbsp; m&nbsp; n&nbsp; o&nbsp; <br>
b&nbsp; c&nbsp; d&nbsp; e&nbsp; f&nbsp; g&nbsp; h&nbsp; i&nbsp; j&nbsp;
k&nbsp; l&nbsp; m&nbsp; n&nbsp; o&nbsp; <br>
b&nbsp; e&nbsp; h&nbsp; k&nbsp; n<span style="font-weight: bold;"> <br>
</span>
<p></p>
</body>
</html>
