<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-2">
   <meta name="Author" content="Krzysztof Barteczko">
   <meta name="GENERATOR" content="Microsoft FrontPage 6.0">
   <title>Krzysztof Barteczko, WPR - cwicenia z2</title>
</head>
<body>

<center><b>Æwiczenia-02</b></center>

<HR>
<p><b><a href="#Zadanie 2">Zadanie 1 - samochody i autobusy (max. 4 punkty)</a></b>
<p><b><a href="#Zadanie 3">Zadanie 2 -wsiadanie i wysiadanie pasa¿erów (max. 4 punkty)</a></b>
<p><b><a href="#Zadanie 2">Zadanie3 - pó³ki z ksi±zkami (max. 8 punktów)</a></b>
<p>
<hr WIDTH="100%">
<br><a NAME="Zadanie 2"></a><b>Zadanie 1 (max. 4 punkty)</b>
<p>Pos³uguj±c siê przyk³adem z wyk³adu (klasa <B> Vehicle </B> i klasa <B>Car</B>) zdefiniowaæ
klasê <B> EngineVehicle</B> (pojazd silnikowy), dziedzicz±c± klasê <B>Vehicle</B>.
<br>Wszystkie pojazdy silnikowe maj± nastêpuj±ce w³a¶ciwo¶ci:
<br>- maj± numer rejestracyjny,
<br>- s± napêdzane paliwem (np. benzyn±), a zatem maj± bak o zadanej pojemno¶ci,
paliwo w baku (jaka¶ ilo¶æ) oraz umo¿liwiaj± tankowanie (powiedzmy metoda <B>
void fill(int)</B> - wlanie do baku n litrów paliwa.
<p>U¿ywaj±c zdefiniowanej klasy <B> EngineVehicle</B> zmodyfikowaæ klasê <B> Car </B> z
wyk³adu i zdefiniowaæ now± klasê <B> Bus</B> (autobus).
<br>Autobusy bêd± mia³y dwie dodatkowe w³a¶ciwo¶ci:
<br>- liczba miejsc
<br>- liczba wolnych miejsc.
<br>Dostarczyæ metod <B> startVehicles(EngineVehicle[])</B> i <B> reportState(EngineVehicle[]),</B>
tak, by nastêpuj±cy program wyprowadzi³ podane po nim napisy:
<p><FONT color="#800080">class Veh1&nbsp; {</FONT>
<p><FONT color="#800080">&nbsp;static void reportState(EngineVehicle[] v)&nbsp; {
<br>&nbsp;&nbsp; // ...
<br>&nbsp;}
<br>&nbsp;</FONT>
<p><FONT color="#800080">&nbsp;static void startEngineVehicles(EngineVehicle[] v) {
<br>&nbsp; // ...
<br>&nbsp;}</FONT>
<p><FONT color="#800080">&nbsp;public static void main(String[] args)&nbsp; {
<br>&nbsp;&nbsp;&nbsp; Bus a = new Bus("BUS1", new Person("MZA", "xxx"),
100, 100, 100, 100, 500, 20),
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b = new Bus("BUS2", new
Person("MZA", "xxx"), 100, 100, 100, 100, 500, 25);</FONT>
<p><FONT color="#800080">&nbsp;&nbsp;&nbsp; Car c = new Car("WA1090", new Person("Janek", "xxx"),
100, 100, 100, 100, 50),
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d = new Car("WB7777", new
Person("Zbyszek", "xxx"), 100, 100, 100, 100, 50);</FONT>
<p><FONT color="#800080">&nbsp;&nbsp;&nbsp; a.fill(100);
<br>&nbsp;&nbsp;&nbsp; b.fill(100);
<br>&nbsp;&nbsp;&nbsp; c.fill(30);
<br>&nbsp;&nbsp;&nbsp; d.fill(50);</FONT>
<p>&nbsp;&nbsp;&nbsp; <FONT color="#800080">EngineVehicle[] allVeh = new EngineVehicle[] { a,
b, c, d };&nbsp;&nbsp; // proszê zwróciæ uwagê na inicjacjê tablicy allVeh!</FONT>
<p><FONT color="#800080">&nbsp;&nbsp;&nbsp; startEngineVehicles( allVeh );
<br>&nbsp;&nbsp;&nbsp; reportState( allVeh );
<br>&nbsp;}</FONT>
<p>Wyprowadza napisy:
<p><FONT color="#008000">Pojazd silnikowy BUS1 - JEDZIE
<br>Pojazd silnikowy BUS2 - JEDZIE
<br>Pojazd silnikowy WA1090 - JEDZIE
<br>Pojazd silnikowy WB7777 - JEDZIE</FONT>
<p>
<hr WIDTH="100%">
<br><a NAME="Zadanie 3"></a><b>Zadanie 2 (dodatkowe, ew. domowe - 4 punkty)</b>
<p>Uzupe³niæ funkcjonalno¶æ obiektów klasy <B> Bus</B> o <b>wsiadanie/wysiadanie</b> pasa¿erów
na przystankach. <br>
Przetestowaæ dodatkow± funkcjonalno¶æ w programie testuj±cym symuluj±c trasê 
autobusu z kilkoma przystankami.<br>&nbsp;
<br>
<HR>
<SPAN style="FONT-WEIGHT: bold">Zadanie 3 - max. 8 punktów</SPAN><BR><BR>Mamy pó³ki. Ka¿da pó³ka ma swoj± nazwê i rozmiar (liczbê ksi±¿ek, które mo¿e pomie¶ciæ)<BR>Mamy ksi±¿ki. Opis ksi±¿ki to: autor, tytu³.<BR>Inicjalnie ka¿da ksi±¿ka jest poza jak±kolwiek pó³k±.<BR>Mo¿na j± wstawiæ na wybran± pó³kê, albo zdj±æ z pó³ki, na której siê znajduje.<BR><BR>
Zaprojektuj klasy <B> Book</B> i <B> Bookshelf,</B> opisuj±ce ksi±¿ki i pó³ki w taki sposób, aby nastêpuj±cy program:<BR><BR>
<FONT color="#800080">public class TestBook {<BR><BR>&nbsp;&nbsp;<BR>&nbsp; public static void main(String[] args) {<BR>&nbsp;&nbsp;&nbsp; Book b1 = new Book(&quot;A&quot;, &quot;bbb&quot;);<BR>&nbsp;&nbsp;&nbsp; Book b2 = new Book(&quot;B&quot;, &quot;ccc&quot;);<BR>&nbsp;&nbsp;&nbsp; Book b3 = new Book(&quot;C&quot;, &quot;ddd&quot;);<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp; Bookshelf bs1 = new Bookshelf(&quot;P1&quot;, 10);<BR>&nbsp;&nbsp;&nbsp; Bookshelf bs2 = new Bookshelf(&quot;P2&quot;, 2);<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp; try {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bs1.insert(b1);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bs1.insert(b2);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bs1.insert(b3);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(bs1);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (Book b : bs1.getBooks()) System.out.println(b);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bs2.insert(b1);</FONT><BR>&nbsp;&nbsp;&nbsp;<FONT color="#800080"> } catch (Exception exc) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(exc.getMessage());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp; try {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (Book b : bs1.getBooks()) bs1.remove(b);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bs2.insert(b1);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bs2.insert(b2);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(bs2);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (Book b : bs2.getBooks()) System.out.println(b);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bs2.insert(b3);<BR>&nbsp;&nbsp;&nbsp; }
catch (Exception exc) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(exc.getMessage());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp; }<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp; try {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bs2.remove(b3);<BR>&nbsp;&nbsp;&nbsp; } catch (Exception exc) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(exc.getMessage());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp; }<BR>&nbsp; }<BR><BR>}</FONT>
<P>
wyprowadzi³ nastêpuj±ce wyniki:<BR><BR><FONT color="#008000"><SPAN style="FONT-STYLE: italic">Pó³ka P1</SPAN><BR style="FONT-STYLE: italic"><SPAN style="FONT-STYLE: italic">A bbb</SPAN><BR style="FONT-STYLE: italic"><SPAN style="FONT-STYLE: italic">B ccc</SPAN><BR style="FONT-STYLE: italic"><SPAN style="FONT-STYLE: italic">C ddd</SPAN><BR style="FONT-STYLE: italic"><SPAN style="FONT-STYLE: italic">Nie mogê wstawiæ ksi±¿ki na pó³kê (Pó³ka P2) - jest ju¿ na pó³ce: Pó³ka P1</SPAN><BR style="FONT-STYLE: italic"><SPAN style="FONT-STYLE: italic">Pó³ka P2</SPAN><BR style="FONT-STYLE: italic"><SPAN style="FONT-STYLE: italic">A bbb</SPAN><BR style="FONT-STYLE: italic"><SPAN style="FONT-STYLE: italic">B ccc</SPAN><BR style="FONT-STYLE: italic"><SPAN style="FONT-STYLE: italic">Nie mogê wstawiæ ksi±¿ki na pó³kê (Pó³ka P2) - brak miejsca</SPAN><BR style="FONT-STYLE: italic"><SPAN style="FONT-STYLE: italic">Nie mogê zdj±æ ksi±¿ki z pó³ki (Pó³ka P2) - nie jest na tej pó³ce</SPAN></FONT><P>
U¿yj wbudowanych klas kolekcyjnych tak aby program by³ krótki i prosty w 
kodowaniu.<FONT color="#008000"><BR>
</FONT>
<HR>
<HR>
<p>
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
