<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en"><html><head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-2">
   <meta name="Author" content="Krzysztof Barteczko">
   <meta name="GENERATOR" content="Microsoft FrontPage 6.0"><title>Krzysztof Barteczko, WPR - cwicenia z2</title></head><body>
 
<center><b>Zadania do wykonania - podsumowanie obiektowo¶ci</b></center>
<HR>
<p><b>
<a href="#Zadanie%201.%20%20Sklep%20owocowy%20%28max%205" style="text-decoration: none">Zadanie 1. 
Sklep owocowy A (max   5 punktów)</a></b><br>
<b><a href="#Zadanie%202" style="text-decoration: none">Zadanie 2.  Sklep owocowy B (max   7 punktów)</a></b>
<br>
<b>
<a href="#Zadanie%203%20%28modyfikacja%20zadania%202%20-%20max%2010" style="text-decoration: none">Zadanie 3.  Sklep owocowy B z now± metod± zakupy(...) [max. 10 punktów]</a></b>
</p><hr width="100%">
<p><b>Uwaga</b>:<br>
Zadania s± do wyboru. <br>
Dla zrozumienia zadania 3 nale¿y przeczytaæ (i mo¿e wykonaæ) zadanie 2.<br>
Dla realizacji ka¿dego z zadañ warto skorzystaæ z <b><a
 href="#Pomoc%201%20%28Hashtable%29">POMOCY</a></b>.</p>
<p>Zadanie 1 daje pierwsze przybli¿enie o co mo¿e chodziæ<br>
Dalsze zadania s± jego doskonaleniem.</p>
<hr width="100%"><br>
<a name="Zadanie 1.  Sklep owocowy (max 5"></a><b><FONT color="#0000FF">Zadanie
1.  Sklep owocowy (max 5 punktów)</FONT></b>
<p>Napisaæ aplikacjê, która symuluje zakupy w sklepie z owocami.<br>
Aplikacja wymaga zdefiniowania kilku klas i umiejêtnego ich u¿ycia, w taki
sposób by nastêpuj±cy program dzia³a³ poprawnie.<br>
<b>Uwaga</b>: w pokazanym tek¶cie programu  wystêpuj± odwo³ania do klas:
<b>Cennik, Koszyk, Truskawki, Banany, Agrest, Mandarynki, Kasa, Torba</b>,
ale nie wystêpuje jeszcze (co najmniej!) jedna wa¿na klasa potrzebna do spe³nienia
wymagañ postawionych przed programem.</p>
<p>class Sklep  {<br>
  public static void main(String[] args)  {</p>
<p>   <B> // Na poczatku dnia ustalany jest cennik</B></p>
<p>    Cennik cennik = new Cennik();<br>
    cennik.set("Truskawki", 5);      // ceny owoców w z³<br>
    cennik.set("Banany", 6);<br>
    cennik.set("Agrest", 7);</p>
<p>    <B>// Wchodzimy do sklepu i bierzemy koszyk</B><br>
    Koszyk koszyk = new Koszyk();</p>
<p>    <B>// Dodajemy do koszyka kilo truskawek<br>
    // pol kilo bananow, cwierc kilo agrestu<br>
    // i 2 kilo mandarynek</B></p>
<p>    koszyk.add(new Truskawki(1));<br>
    koszyk.add(new Banany(0.5));<br>
    koszyk.add(new Agrest(0.25));<br>
    koszyk.add(new Mandarynki(2));  <B>// dziwnym trafem sprzedawca zapomnial
<br>
                                                            // ustalic ich
ceny, ale my o tym nie wiemy</B></p>
<p>    <B>// podchodzimy do kasy nr 1,<br>
    // pokazujemy zawarto¶æ koszyka<br>
    // a kasa nas rozlicza wg obowi±zuj±cego cennika</B></p>
<p>    Kasa kasa = new Kasa(1);<br>
    koszyk.showContent();               <B> // pokazuje zawarto¶æ koszyka</B><br>
    kasa.printBill(koszyk, cennik);    <B>// wydruk rachunku</B></p>
<p>   <B> // placimy (czego program juz nie pokazuje)<br>
    // i przekladamy zawartosc koszyka do torby</B></p>
<p>    Torba torba = new Torba();<br>
    torba.loadFrom(koszyk);       <B>// przelozenie owocow z koszyka do torby</B>
</p>
<p>   <B> // Przychodzimy do domu i pokazujemy co kupilismy</B></p>
<p>    torba.showContent();  <B>// drukuje zawartosc torby</B></p>
<p>  }<br>
}</p>
<p>Powy¿szy program powinien wyprowadziæ co¶ w rodzaju nastêpuj±cego listingu:
</p>
<p>Zawarto¶æ koszyka:<br>
Truskawki 1.0 kg<br>
Banany 0.5 kg<br>
Agrest 0.25 kg<br>
Mandarynki 2.0 kg</p>
<p>Kasa nr 1 (rachunek)<br>
Truskawki 1.0 kg * 5.0 zl/kg  = 5.0 zl<br>
Banany 0.5 kg * 6.0 zl/kg  = 3.0 zl<br>
Agrest 0.25 kg * 7.0 zl/kg  = 1.75 zl<br>
Razem: 9.75 zl</p>
<p>Zawarto¶æ torby<br>
Truskawki 1.0 kg<br>
Banany 0.5 kg<br>
Agrest 0.25 kg<br>
&nbsp;</p>
<p><b>Wymaganie:</b><br>
<b>dodanie do powy¿szego programu zakupów innych rodzajów owoców (np. Winogron)
ma byc bardzo ³atwe.</b></p>
<p>Potrzeba tylko :</p>
<ul>
  <li>zdefiniowac now± klasê np. Winogrona, przy czym ma to byæ jak najbardziej
oszczêdna definicja (kilka wierszy kodu)</li>
  <li>dodaæ odpowiedni kod do funkcji main (np. cennik.set("Winogrona", 8); 
koszyk.add(new Winogrona(0.5)); )</li>
</ul>
<b>Przy dodaniu nowego rodzaju owoców nie wolno modyfikowaæ ¿adnych innych
klas programu.</b>
<p>UWAGA. W sklepie mog± byæ owoce, których zapomniano dodaæ do cennika. Wtedy
przy kasie s± one usuwane z naszego koszyka.</p>
<p></p>
<hr width="100%"><br>
<a name="Zadanie 2"></a><b><FONT color="#0000FF">Zadanie 2 (sklep owocowy
B - max 7 punktów)</FONT></b>
<p>Napisaæ aplikacjê, która symuluje zakupy w sklepie z owocami.<br>
Aplikacja wymaga zdefiniowania kilku klas i umiejêtnego ich u¿ycia, w taki
sposób by nastêpuj±cy program dzia³a³ poprawnie.<br>
<b>Uwaga</b>: w pokazanym tek¶cie programu  wystêpuj± odwo³ania do klas:
<b>Cennik, Koszyk, Truskawki, Banany, Agrest, Mandarynki, Kasa, Torba</b>,
ale nie wystêpuje jeszcze dwie wa¿ne klasy potrzebne do spe³nienia wymagañ
postawionych przed programem.</p>
<p>class Sklep  {</p>
<p>  private Kasa kasa;</p>
<p>  Sklep() {<br>
    <B>// Na poczatku dnia ustalany jest cennik<br>
    // i otwierana jest kasa</B><br>
    Cennik cennik = Cennik.getCennik();<br>
    cennik.set("Truskawki", 5);<br>
    cennik.set("Banany", 6);<br>
    cennik.set("Agrest", 7);<br>
    kasa = new Kasa();<br>
  }<br>
 <br>
 public void zakupyDemo(String osoba) {</p>
<p>   <B> // Podana osoba wchodzi do sklepu i bierze koszyk<br>
    // Ka¿dy koszyk ma swój numer<br>
    // Liczba koszyków jest nieograniczona</B></p>
<p>    Koszyk koszyk = new Koszyk();<br>
    System.out.println(osoba + " bierze " + koszyk);<br>
 <br>
 <br>
    <B>// Dodaje do koszyka kilo truskawek<br>
    // pol kilo bananow, cwierc kilo agrestu<br>
    // i 2 kilo mandarynek</B><br>
    koszyk.add(new Truskawki(1));<br>
    koszyk.add(new Banany(0.5));<br>
    koszyk.add(new Agrest(0.25));<br>
    koszyk.add(new Mandarynki(2));  <B>// dziwnym trafem sprzedawca zapomnial
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ustalic ich ceny, ale kupujacy o tym nie
wie<br>
 </B><br>
&nbsp;&nbsp;<B>&nbsp; // podchodzi do kasy<br>
    // pokazuje zawarto¶æ koszyka<br>
    // a kasa go rozlicza wg ustalonego cennika</B></p>
<p>    koszyk.showContent();<br>
    kasa.printBill(koszyk);  // wydruk rachunku<br>
 <br>
    <B>// placi i ...<br>
    // przeklada zawartosc koszyka do torby</B><br>
    Torba torba = new Torba(osoba);<br>
    torba.loadFrom(koszyk);<br>
 <br>
   <B> // Przychodzi do domu i pokazuje co kupil(a)</B><br>
    torba.showContent();</p>
<p>  }<br>
}</p>
<p><B>// Klasa testuj±ca klasê Sklep</B><br>
class Test {<br>
  public static void main(String[] args)  {<br>
    Sklep s = new Sklep();<br>
    s.zakupyDemo("Janek");<br>
  }</p>
<p>Wydruk:<br>
Janek bierze koszyk sklepowy nr 1<br>
Zawarto¶æ pojemnika "koszyk sklepowy nr 1" :<br>
Truskawki 1.0 kg<br>
Banany 0.5 kg<br>
Agrest 0.25 kg<br>
Mandarynki 2.0 kg<br>
Kasa - rachunek za [ koszyk sklepowy nr 1 ] :<br>
Truskawki 1.0 kg * 5.0 zl/kg  = 5.0 zl<br>
Banany 0.5 kg * 6.0 zl/kg  = 3.0 zl<br>
Agrest 0.25 kg * 7.0 zl/kg  = 1.75 zl<br>
Razem: 9.75 zl<br>
Zawarto¶æ pojemnika "torba [ w³a¶ciciel: Janek ] " :<br>
Truskawki 1.0 kg<br>
Banany 0.5 kg<br>
Agrest 0.25 kg<br>
 <br>
&nbsp;</p>
<p><b>Wymagania:</b></p>
<ul>
  <li><b>dodanie do powy¿szego programu zakupów innych rodzajów owoców (np.
Winogron) ma byc bardzo ³atwe; nale¿y tylko dodaæ kilkuwierszow± definicjê
nowej klasy owoców, ustalenie cen oraz ew. zakup tych owoców.</b></li>
  <li>nale¿y wykorzystaæ klasy abstrakcyjne i polimorfizm</li>
  <li>nale¿y zminimalizowaæ kod klas Koszyk i Torba</li>
  <li>nale¿y zdefiniowaæ klasê Cennik jako singleton (mo¿emy mieæ zawsze
tylko jeden cennik)</li>
</ul>
UWAGA. W sklepie mog± byæ owoce, których zapomniano dodaæ do cennika. Wtedy
przy kasie s± one usuwane z naszego koszyka.
<hr width="100%"><br>
<a name="Zadanie 3 (modyfikacja zadania 2 - max 10"></a><b><FONT color="#0000FF">Zadanie 3 (modyfikacja zadania 2 - max 10 punktów)</FONT></b>
<br>
Po wykonaniu zadania 2 usun±æ metodê <B> zakupyDemo(...) </B> z klasy <B> Sklep,</B> a zamiast
niej zdefiniowaæ metodê <B> void zakupy(...)</B>, tak by nastêpuj±cy kod:
<p>class Sklep  {</p>
<p>  private Kasa kasa;</p>
<p>  Sklep() {<br>
    /<B>/ Na poczatku dnia ustalany jest cennik<br>
    // i otwierana jest kasa</B><br>
    Cennik cennik = Cennik.getCennik();<br>
    cennik.set("Truskawki", 5);<br>
    cennik.set("Banany", 6);<br>
    cennik.set("Agrest", 7);<br>
    kasa = new Kasa();<br>
  }<br>
 <br>
  <B>// tu definicja metody zakupy(....)</B><br>
  <br>
}</p>
<p>class Test {<br>
  public static void main(String[] args)  {<br>
    Sklep s = new Sklep();<br>
    s.zakupy("Janek",<br>
              new Owoce[] { new Truskawki(1), new Banany(0.5),<br>
                            new Agrest(0.25), new Mandarynki(1) }<br>
            );</p>
<p>    s.zakupy("Ma³gosia",<br>
              new Owoce[] { new Truskawki(5), new Banany(3) }  );<br>
  }<br>
}</p>
<p>da³ w wyniku wydruk:</p>
<p>Janek bierze koszyk sklepowy nr 1<br>
Zawarto¶æ pojemnika "koszyk sklepowy nr 1" :<br>
Truskawki 1.0 kg<br>
Banany 0.5 kg<br>
Agrest 0.25 kg<br>
Mandarynki 1.0 kg<br>
Kasa - rachunek za [ koszyk sklepowy nr 1 ] :<br>
Truskawki 1.0 kg * 5.0 zl/kg  = 5.0 zl<br>
Banany 0.5 kg * 6.0 zl/kg  = 3.0 zl<br>
Agrest 0.25 kg * 7.0 zl/kg  = 1.75 zl<br>
Razem: 9.75 zl<br>
Zawarto¶æ pojemnika "torba [ w³a¶ciciel: Janek ] " :<br>
Truskawki 1.0 kg<br>
Banany 0.5 kg<br>
Agrest 0.25 kg<br>
Ma³gosia bierze koszyk sklepowy nr 2<br>
Zawarto¶æ pojemnika "koszyk sklepowy nr 2" :<br>
Truskawki 5.0 kg<br>
Banany 3.0 kg<br>
Kasa - rachunek za [ koszyk sklepowy nr 2 ] :<br>
Truskawki 5.0 kg * 5.0 zl/kg  = 25.0 zl<br>
Banany 3.0 kg * 6.0 zl/kg  = 18.0 zl<br>
Razem: 43.0 zl<br>
Zawarto¶æ pojemnika "torba [ w³a¶ciciel: Ma³gosia ] " :<br>
Truskawki 5.0 kg<br>
Banany 3.0 kg<br>
&nbsp;</p>
<p></p>
<hr width="100%"><a name="Pomoc 1 (Hashtable)"></a><b>Pomoc 1 (Hashtable)</b>
<p>Przy ustalaniu cen skorzystaæ z klasy Hashtable, która umo¿liwia ³atwe
odnajdywanie informacji wg kluczy.<br>
Do Hashtable dodajemy za pomoc± metody <b>put -</b> pary (klucz, warto¶æ),
które s± odniesieniami do obiektów typu Object.<br>
Np. je¶li chcemy dodaæ pod kluczem "Ala" warto¶æ typu double, to musimy z
double zrobiæ obiekt (do czego s³u¿y klasa Double):</p>
<p>Hashtable ht = new Hashtable();<br>
double d = 1.7;<br>
String s = "Ala";<br>
ht.put(s, new Double(d));    // dodanie warto¶ci (reprezentowanej przez obiekt
Double, który zawiera warto¶c double 1.7) pod kluczem s ("Ala")</p>
<p>Z tablicy uzyskujemy warto¶ci (<b>które s± odniesieniami do obiektów formalnego
typu Object</b>) "po kluczu" za pomoc± odwo³ania get(key) np. aby uzyskaæ
warto¶æ zapisan± uprzednio (w wierszach wy¿ej) pod kluczem "Ala":</p>
<p>Object o = ht.get(s);  // s wskazuje na "Ala" i jest kluczem<br>
                                  // je¿eli w tablicy nie bêdzie klucza s
("Ala") to metoda zwraca <b>null</b></p>
<p>Double val = (Double) o;  // obowi±zkowa konwersja, by na uzyskanym obiekcie
stosowaæ metody klasy Double</p>
<p>double dv = val.doubleValue();  // uzyskujemy warto¶æ typu double, zapisan±
w obiekcie typu Double<br>
&nbsp;</p>
<p><b>Pomoc 2 (Vector)</b></p>
<p>Dodawanie do koszyka i torby mo¿na oprogramowaæ wykorzystuj±c klasê Vector.
<br>
Obiekt klasy Vector to dynamiczna (zmieniaj±ca swoje rozmiary w trakcie wykonania)
tablica dowolnych obiektów (typ Object).<br>
Metody:<br>
add(Object o) - dodaje referencjê do obiektu o jako nowy element wektora,
<br>
Object get(int i) - zwraca referencjê do obiektu, która zapisana jest w i-ym
lemencie wektora<br>
remove(Object o) - usuwa referencjê do obiektu o z wektora<br>
int size() - zwraca aktualn± liczbê elementów wektora</p>
<p><b>Pomoc 3 (dla realizacji zadania 2 -- singleton)</b></p>
<p>Singleton - to klasa, któr± mo¿na wykorzystaæ do stworzenia (w danym programie)
tylko jednego obiektu.<br>
Typowa realizacja:</p>
<ul>
  <li>prywatny konstruktor,</li>
  <li>metoda statyczna get...(), która zwraca JEDYNY utworzony obiekt tej
klasy (je¶li jeszcze nie zosta³ utworzony, to go tworzy)</li>
</ul>
<b>Pomoc 4 (przypomnienie - dla realizacji zadania 3)</b>
<p>Wykorzystaæ symulacjê wywo³ania funkcji (metody) ze zmienn± liczb± argumentów.
<br>
Wywo³anie jest pokazane - przypomnieæ sobie co oznacza ono dla definicji funkcji
(metody)<br>
 <br>
&nbsp;</p>
<HR>
<HR>
<p></p>
</body></html>