<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-2">
<meta name=ProgId content=FrontPage.Editor.Document>
<meta name=Generator content="Microsoft FrontPage 6.0">
<meta name=Originator content="Microsoft Word 11">
<link rel=Edit-Time-Data href="cw-03-a_files/editdata.mso">
<title>Krzysztof Barteczko, WPR - cwicenia z2</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Wojtek</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>Wojtek</o:LastAuthor>
  <o:Revision>3</o:Revision>
  <o:TotalTime>14</o:TotalTime>
  <o:Created>2006-03-18T06:48:00Z</o:Created>
  <o:LastSaved>2006-03-18T06:49:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>432</o:Words>
  <o:Characters>2598</o:Characters>
  <o:Lines>21</o:Lines>
  <o:Paragraphs>6</o:Paragraphs>
  <o:CharactersWithSpaces>3024</o:CharactersWithSpaces>
  <o:Version>11.6360</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:GrammarState>Clean</w:GrammarState>
  <w:HyphenationZone>21</w:HyphenationZone>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman"; margin-left:0cm; margin-right:0cm; margin-top:0cm}
p
	{font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes}
@page Section1
	{size:595.3pt 841.9pt;
	margin:70.85pt 70.85pt 70.85pt 70.85pt;
	mso-header-margin:35.4pt;
	mso-footer-margin:35.4pt;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:1127239706;
	mso-list-template-ids:-1431416718;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l1
	{mso-list-id:1468275658;
	mso-list-template-ids:-1567162964;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400}
</style>
<![endif]-->
<meta name=Author content="Krzysztof Barteczko">
<!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=PL link=blue vlink=blue style='tab-interval:35.4pt'>

<div class=Section1>

<p class=MsoNormal align=center style='text-align:center'><b>Zadania do
wykonania</b></p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p><b><span style='color:blue'><a href="#Zadanie%201"><span style='text-decoration:
none;text-underline:none'>Zadanie 1&nbsp; - Hermetyzacja</span></a></span><span style='color:blue'><a href="#Zadanie%201"><span style='text-decoration:
none;text-underline:none'>, dziedziczenie, polimorfizm&nbsp; (4 p)</span></a></span></b><span style='color:black'> &nbsp;</span></p>
<p><b><span style='color:blue'><a href="#Zadanie%201">
<span style='text-decoration:
none;text-underline:none'>Zadanie 2&nbsp; - Interfejsy, konwersje referencyjne,
polimorfizm&nbsp; (4 p)</span></a></span></b><span style='color:blue'> <o:p></o:p></span></p>

<p><span style='color:black'> <o:p></o:p></span><B>
<A style="TEXT-DECORATION: none" href="#Zadanie%201.%20%20Sklep%20owocowy%20%28max%205">
Zadanie 3.&nbsp; Figury geometryczne (max.&nbsp;&nbsp; 4p)</A></B></p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal><span lang=EN-US style='mso-ansi-language:EN-US'><br>
<b>Zadanie 1<span class=GramE>&nbsp; -</span> Zdefiniuj w programie interfejs</b>
<o:p></o:p></span></p>

<p><span class=GramE><span lang=EN-US style='color:purple;mso-ansi-language:
EN-US'>interface</span></span><span lang=EN-US style='color:purple;mso-ansi-language:
EN-US'> Sortable{<br>
<br>
&nbsp; int compare(Object obj1,Object obj2);&nbsp;<br>
<br>
}</span><span lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p>deklaruj±cy metodê<b> int compare(Object obj1,Object obj2) </b>porównuj±c±
dwa obiekty i zwracaj±c± w konkretnej implementacji</p>

<ul type=disc>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list 36.0pt'><b>liczbê ujemn± je¿eli
     obj1 &lt; obj2</b></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list 36.0pt'><b>liczbê równ± zeru je¿eli
     obj1==object2</b></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list 36.0pt'><b>liczbe dodatni± je¿eli
     obj1&gt;obj2</b></li>
</ul>

<p><b>Zdefiniuj równie¿ klasê&nbsp;</b></p>

<p><span class=GramE><span lang=EN-US style='color:purple;mso-ansi-language:
EN-US'>class</span></span><span lang=EN-US style='color:purple;mso-ansi-language:
EN-US'> Str implements Sortable {<br>
<br>
&nbsp;&nbsp; private String name;&nbsp;<br>
.......</span><span lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p><span lang=EN-US style='color:purple;mso-ansi-language:EN-US'>}</span><span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p><span class=GramE><b><span lang=EN-US style='mso-ansi-language:EN-US'>oraz</span></b></span><b><span
lang=EN-US style='mso-ansi-language:EN-US'> klasê&nbsp;</span></b><span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p><span class=GramE><span lang=EN-US style='color:purple;mso-ansi-language:
EN-US'>class</span></span><span lang=EN-US style='color:purple;mso-ansi-language:
EN-US'> Int implements Sortable{<br>
<br>
&nbsp; private int x;<br>
&nbsp; .....</span><span lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p><span lang=EN-US style='color:purple;mso-ansi-language:EN-US'>}</span><span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p><span class=GramE><b><span lang=EN-US style='mso-ansi-language:EN-US'>tak</span></b></span><b><span
lang=EN-US style='mso-ansi-language:EN-US'> aby poni¿szy test&nbsp;</span></b><span
lang=EN-US style='mso-ansi-language:EN-US'><o:p></o:p></span></p>

<p><span lang=EN-US style='color:purple;mso-ansi-language:EN-US'>class
TestInter {&nbsp;<br>
<br>
&nbsp;public static void main(String args[])&nbsp;<br>
&nbsp;{&nbsp;<br>
&nbsp;&nbsp; Sortable sort=new Str();<br>
<br>
&nbsp;&nbsp; Sortable sort1=null;&nbsp;<br>
&nbsp;&nbsp; Sortable sort2=null;&nbsp;<br>
<br>
&nbsp;&nbsp; sort1=new Str(&quot;kot&quot;);<br>
&nbsp;&nbsp; sort2=new Str(&quot;ala&quot;);<br>
<br>
&nbsp;&nbsp; System.out.println(&quot;----- porównywanie ³añcuchów-----&quot;);<br>
<br>
&nbsp;&nbsp; System.out.println(sort.compare(sort1,sort2)); </span><span
lang=EN-US style='color:green;mso-ansi-language:EN-US'>//wywo³anie
polimorficzne<br>
</span><span lang=EN-US style='color:purple;mso-ansi-language:EN-US'><br>
&nbsp;&nbsp; sort=new Int();<br>
<br>
&nbsp;&nbsp; sort1=new Int(230);<br>
&nbsp;&nbsp; sort2=new Int(5);<br>
<br>
&nbsp;&nbsp; System.out.println(&quot;----- porównywanie liczb-----&quot;);<br>
<br>
&nbsp;&nbsp; System.out.println(sort.compare(sort1,sort2)); </span><span
lang=EN-US style='color:green;mso-ansi-language:EN-US'>//wywo³anie
polimorficzne</span><span lang=EN-US style='color:purple;mso-ansi-language:
EN-US'><br>
<br>
&nbsp; }&nbsp;<br>
<br>
}//class TestInter</span><span lang=EN-US style='mso-ansi-language:EN-US'><br>
<br>
<b>da³ wynik nastepuj±cy:</b> <o:p></o:p></span></p>

<p><span style='color:purple'>&quot;----- porównywanie ³añcuchów-----&quot;<br>
</span>10<br>
<span style='color:purple'>&quot;----- porównywanie liczb-----&quot;<br>
1</span></p>

<div class=MsoNormal align=center style='text-align:center'>

&nbsp;</div>

<p class=MsoNormal><b>Wskazówka </b>:&nbsp; zastanów siê </p>

<ul type=disc>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo2;tab-stops:list 36.0pt'>jak ma wyl±daæ
     implementacja metody <b>compare(...)</b> w klasach <b>Str</b> i <b>Int</b></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo2;tab-stops:list 36.0pt'>jakie konstruktory powinny
     posiadaæ te klasy ?</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo2;tab-stops:list 36.0pt'>dlaczego wskazane wywo³ania
     s± polimorficzne ?</li>
</ul>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b>Zadanie 2 (max. 4 p)</b> <o:p></o:p></p>

<p>Zdefinuij w programie klasê <b>Osoba :</b><o:p></o:p></p>

<p><font color="#800080"><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>class</span></span></font><span
lang=EN-US style='mso-ansi-language:EN-US'><font color="#800080"> Osoba{</font><o:p></o:p></span></p>

<p><font color="#800080"><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>private</span></span></font><span
lang=EN-US style='mso-ansi-language:EN-US'><font color="#800080"> String imie;<br>
private String nazwisko;<br>
private int wiek;</font><o:p></o:p></span></p>

<p><span lang=EN-US style='mso-ansi-language:EN-US'><font color="#800080">//konstruktory....</font><o:p></o:p></span></p>

<p><font color="#800080"><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>public</span></span></font><span
lang=EN-US style='mso-ansi-language:EN-US'><font color="#800080"> String getImie(){&#8230;}</font><o:p></o:p></span></p>

<p><font color="#800080"><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>public</span></span></font><span
lang=EN-US style='mso-ansi-language:EN-US'><font color="#800080"> String getNazwisko(){&#8230;}</font><o:p></o:p></span></p>

<p><font color="#800080"><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>public</span></span></font><span
lang=EN-US style='mso-ansi-language:EN-US'><font color="#800080"> int getWiek(){&#8230;}</font><o:p></o:p></span></p>

<p><font color="#800080"><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>public</span></span></font><span
lang=EN-US style='mso-ansi-language:EN-US'><font color="#800080"> void show(){......}</font><o:p></o:p></span></p>

<p><font color="#800080">public String toString(){....}</font><o:p></o:p></p>

<p><font color="#800080">}//class Osoba</font><o:p></o:p></p>

<p>reprezentujaca osobê o podanych danych.<o:p></o:p></p>

<p>Metoda <b>show() </b>ma prezentowaæ na konsoli dane o osobie<br>
Metoda <b>toString()</b> ma zwracaæ ³añcuch opisuj±cy dan± osobê - opis
pól+warto¶ci pól <o:p></o:p></p>

<p>Zdefiniuj równie¿ klasê <b>Pracownik</b> dziedzicz±c± klasê <b>Osoba:</b><o:p></o:p></p>

<p><font color="#800080"><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>class</span></span></font><span
lang=EN-US style='mso-ansi-language:EN-US'><font color="#800080"> Pracownik extends Osoba{</font><o:p></o:p></span></p>

<p><font color="#800080"><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>private</span></span></font><span
lang=EN-US style='mso-ansi-language:EN-US'><font color="#800080"> String zawod;<br>
private double pensja;</font><o:p></o:p></span></p>

<p><span lang=EN-US style='mso-ansi-language:EN-US'><font color="#800080">//konstruktory....</font><o:p></o:p></span></p>

<p><font color="#800080"><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>public</span></span></font><span
lang=EN-US style='mso-ansi-language:EN-US'><font color="#800080"> String getZawod(){&#8230;}</font><o:p></o:p></span></p>

<p><font color="#800080"><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>public</span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> </span>
<span style='mso-ansi-language:EN-US'>double</span></font><span
lang=EN-US style='mso-ansi-language:EN-US'><font color="#800080"> getPensja(){&#8230;}</font><o:p></o:p></span></p>

<p><font color="#800080"><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>public</span></span></font><span
lang=EN-US style='mso-ansi-language:EN-US'><font color="#800080"> void show(){......}</font><o:p></o:p></span></p>

<p><font color="#800080"><span class=GramE><span lang=EN-US style='mso-ansi-language:EN-US'>public</span></span></font><span
lang=EN-US style='mso-ansi-language:EN-US'><font color="#800080"> String toString(){....}</font><o:p></o:p></span></p>

<p><font color="#800080">}//class Pracownik</font></p>

<p>Metoda <b>show() </b>ma prezentowaæ na konsoli dane o pracowniku<br>
Metoda <b>toString()</b> ma zwracaæ ³añcuch opisuj±cy danego pracownika - opis
pól+warto¶ci pól <o:p></o:p></p>

<p>Utwórz obiekty klasy<b> Osoba i Pracownik </b>i wywo³aj wszyskie metody z
obu klas. <o:p></o:p></p>

<p>Jakiego typu zmiennych referencyjnych trzeba u¿yæ? <o:p></o:p></p>

<p>Czy do wywo³ania metod klasy <b>Pracownik </b>mo¿na u¿yc referencji typu<b>
Osoba? </b>Dlaczego ?</p>

<p>Które metody bêd± wywo³ane polimorficznie ?</p>

<p>Czy do wywo³ania metod klasy <b style='mso-bidi-font-weight:normal'>Osoba<span
style='mso-bidi-font-weight:bold'> </span></b>mo¿na u¿yc referencji typu<b> Pracownik?
</b>Dlaczego ?</p>

<p>Jak nazywa sie definiowanie w podklasach metod o takiej samej sygnaturze co
metody nadklasy ?<br>
Jak sie nazywa wi±zanie nazwy metody z cia³em metody w fazie wykonania ?<br>
Czy wszystkie metody w Javie mo¿na wywo³ywaæ polimorficznie ?<o:p></o:p></p>

<p>Jak w obu klasach mo¿na odwo³aæ sie do pól prywatnych obu klas w innej
klasie&nbsp; ? </p>

<hr>

<P><B>
<A style="TEXT-DECORATION: none" href="#Zadanie%201.%20%20Sklep%20owocowy%20%28max%205">
Zadanie 3.&nbsp; Figury geometryczne (max.&nbsp;&nbsp; 4p)</A></B></P>
<P>Zdefinuj w programie klasê abstrakcyjn±<B> Figura </B>reprezentujac± dowoln± figurê geometryczn±<B>:</B></P>
<P><FONT color="#800080">abstract class Figura{</FONT></P>
<P><FONT color="#800080">&nbsp;&nbsp; private String nazwa; <B>//nazwa figury</B></FONT></P>
<P><FONT color="#800080">&nbsp;&nbsp; protected double[] wymiary; <B>//wymiary figury</B></FONT></P>
<P><FONT color="#800080">&nbsp;&nbsp; protected String[] opisWym;&nbsp; <B>// opis wymiarów</B></FONT></P>
<P><FONT color="#800080">&nbsp;&nbsp; // .... konstruktor- jaki ?</FONT></P>
<P><FONT color="#800080">&nbsp;&nbsp; abstract public double podajPole(); <B>//metoda abstrakcyjna-oblicza pole&nbsp; figury</B></FONT></P>
<P><FONT color="#800080">&nbsp;&nbsp; abstract public double podajObwod(); <B>//metoda abstrakcyjna - oblicza obwod figury</B></FONT></P>
<P><FONT color="#800080">&nbsp;&nbsp; public void show(){ <B>//prezentuje obiekt na konsoli<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; ........ instrukcje metody show()</B></FONT></P>
<P><FONT color="#800080">&nbsp;&nbsp; }//show()</FONT></P>
<P><FONT color="#800080">}//class Figura</FONT></P>
<P>Na bazie tej klasy zdefinuj klasy konkretnych&nbsp; figur geometrycznych&nbsp; np. - prostok±t, ko³o, trójk±t a w nich odpowiednie konstruktory i metody,</P>
<P>tak&nbsp; aby mo¿na by³o wywo³ywaæ polimorficznie metody <B>getPole(), getObwod() i show() </B>pos³uguj±c sie odno¶nikiem typu <B>Figura.</B></P>
<P><B>Przetestuj te metody w klasie g³ównej programu.</B></P>
<P>Fragment programu do testowania:</P>
<P><FONT color="#800080">public static void main(String[] args){<BR><BR>&nbsp;&nbsp; Figura fig = null;<BR><BR>&nbsp;&nbsp; fig = new Prostokat(20,30);<BR>&nbsp;&nbsp; fig.show();<BR><BR>&nbsp;&nbsp; System.out.println(&quot;-------------------------------&quot;);<BR><BR>&nbsp;&nbsp; fig = new Kolo(10);<BR>&nbsp;&nbsp; fig.show();<BR><BR>&nbsp;&nbsp; System.out.println(&quot;-------------------------------&quot;);<BR><BR>&nbsp;&nbsp; fig = new Trojkat(3,4,5);<BR>&nbsp;&nbsp; fig.show();<BR><BR>&nbsp;&nbsp; System.out.println(&quot;-------------------------------&quot;);<BR>}</FONT></P>
<P>ma daæ nastepujacy wydruk na konsolê:</P>
<P><B>Nazwa figury: Prostokat<BR>dlugosc: 20.0<BR>szerokosc: 30.0<BR>pole= 600.0<BR>obwod= 100.0<BR>-------------------------------<BR>Nazwa figury: Kolo<BR>promien: 10.0<BR>pole= 314.1592653589793<BR>obwod= 62.83185307179586<BR>-------------------------------<BR>Nazwa figury: Trojkat<BR>bok-1: 3.0<BR>bok-2: 4.0<BR>bok-3: 5.0<BR>pole= 6.0<BR>obwod= 12.0<BR>-------------------------------<BR></B></P>
<HR>
<HR>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>