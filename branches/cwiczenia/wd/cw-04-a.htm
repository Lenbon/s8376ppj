<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en"><html><head>
   
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-2">
   
  <meta name="Author" content="Krzysztof Barteczko">
   
  <meta name="GENERATOR" content="Microsoft FrontPage 6.0"><title>Krzysztof Barteczko - cwiczenia Java</title></head><body>
<center><b>Zadania do wykonania</b></center>
<HR>
<P align="left"><FONT color="#0000FF" size="4">Zadanie-1: znajdywanie has³a (max.10p)</FONT></P>
<P align="left"><FONT color="#0000FF" size="4">Zadanie-2: producent-konsument (max. 10p)</FONT></P>
<P align="left"><FONT color="#0000FF" size="4">Zadanie-3: dane meteorologiczne (max. 10p)</FONT></P>
<P align="left"><FONT size="4" color="#FF0000">Uwaga: obowi±zkowe jest tylko jedno wybrane zadanie</FONT></P>
<center>
<hr width="100%"></center>
<FONT color="#0000FF"><B><FONT size="4">Zadanie- 1: znajdywanie has³a ( max. 10 p)</FONT></B><br>
</FONT>
<br>
W firmie pracuje kilka osób. Która¶ z nich zabezpieczy³a has³em dostêp do komputera z danymi o wynalazku.<br>
Wiadomo, ¿e has³o zawiera inicja³y osoby i nastêpuj±ce po nich 6 cyfr.<br>
Dwie siatki szpiegowskie próbuj± z³amaæ has³o.<br>
<B>
Jedna </B>  z nich stosuje automatyczny kod, który generuje wszystkie mo¿liwe
kombinacje: inicja³y i sze¶æ dowolnych cyfr, opieraj±c siê przy tym tylko
na znajomo¶ci inicja³ów pracowników.<br>
<B>
Druga u</B>zyska³a informacjê, ¿e cyfry zawsze oznaczaj± RRMMDD - rok, miesi±c,
dzieñ urodzenia pracownika i próbuje z³amaæ has³o "rêcznie", wprowadzaj±c
kolejne mo¿liwe warianty has³a.<br>
<br>
Napisaæ program, który:
<P>Na podstawie podanego zestawu pracowników i informacji
o ich datach urodzenia losowo generuje haslo w postaci xxRRMMDD, gdzie xx
- inicja³y, RR - rok, MM- miesi±c, DD - dzieñ urodzaniea  i zamyka tym haslem
dostêp do danych,</P>
<P><B><FONT size="3">Grupa A.</FONT></B> generuje automatycznie kolejno wszystkie mo¿liwe has³a,
opieraj±c siê tylko na informacji o inicja³ach pracowników oraz ¿e has³o
po inicja³ach zawiera sze¶æ dowolnych cyfr i sprawdza, czy które¶ z nich
pasuje do prawdziwego has³a, je¶li tak, to program koñczy dzia³anie i wypisywane
jest prawdziwe haslo (tak dzia³a siatka szpiegowska nr 1).</P>
<P>
<br>
<B><FONT size="3">Grupa B</FONT><BIG>.</BIG></B> w pêtli tworzy okienka
dialogowe przez które wprowadza  haslo, próbuj±c je zgadn±æ, opieraj±c siê na
podanych inicja³ach i datach urodzin(nie ma gwarancji ¿e inicja³y i daty
odpowiadaj± sobie kolejno¶ci±)&nbsp; (tak dzia³a
siatka szpiegowska 2).
<br>
<br>
Czê¶æ <B>A </B> nale¿y zrealizowac jako dzia³±j±c± wspó³bie¿nie z czê¶ci±
<B>B.</B> <br>
<br>
Nale¿y przy tym&nbsp; podzieliæ pracê w czê¶ci <B>A </B>pomiêdzy w±tki, których
liczba podawana jest jako argument wywo³ania aplikacji. Nale¿y zmierzyæ czas
odnalezienia has³a w sytuacjach, gdy w czê¶ci <B>A</B> zajmuje siê tym jeden w±tek,
albo 2 albo 10, albo 100 albo jeszcze inna ich liczba.&nbsp;<BR>
 Sprawdziæ co ew. jest
potrzebne, by wiêksza liczba w±tków szybciej mog³a odnale¼æ w³a¶ciwe has³o.
Zapewniæ te¿, by wraz z w±tkami czê¶ci <B>A</B> dzia³a³a równocze¶nie  czê¶æ dialogowa
<B>B.</B><br>
<br>
<B>
Uwaga:</B> spróbowaæ podzieliæ kod pomiêdzy klasy, odpowiadaj±ce jego funkcjonalnym czê¶ciom
- np. pracownicy, zasób zamkniêty has³em, automatyczny generator i sprawdzaacz
hase³, czê¶æ dialogowa.<br>
</P>
<HR>
<H2><B><FONT color="#0000FF" size="4">Zadanie-2: producent - konsument (max. 10p)</FONT></B></H2>
Producent produkuje porcje i umieszcza je w buforze, a konsument pobiera je stamt±d. Bufor przechowuje porcje w kolejno¶ci wk³adania ich przez producenta. Dostêp do bufora mo¿e mieæ w danej chwili tylko jeden producent lub konsument.
<H3>Zadanie</H3>
U¿ywaj±c w±tków napisz program symuluj±cy wspó³dzia³anie producentów i konsumentów:
<OL type="a">
<LI>Jeden producent i jeden konsument. Porcje jednakowej wielko¶ci, bufor nieograniczonej pojemno¶ci.
<LI>Bufor o ograniczonej pojemno¶ci.
<LI>Wielu producentów i/lub konsumentów.
<LI>Producent produkuje i wstawia do bufora porcje ró¿nej wielko¶ci. Konsument ¿±da porcji okre¶lonej wielko¶ci. (warianty: wiêkszej lub mniejszej ni¿ podana wielko¶æ).
<LI>Producent nie doprowadza do nadprodukcji-nie produkuje jezeli konsumenci nie skonsumowali jeszcze poprzedniej produkcji<BR>&nbsp;</LI>
</OL>
<H3>Wyja¶nienia</H3>
<UL>
<LI>Bufor jest obiektem klasy <TT>Bufor</TT>. W najprostszym przypadku wk³adanie porcji polega na wywo³aniu metody <TT>void wstaw() </TT>, która bêdzie zwiêkszaæ zmienn± ca³kowit± informuj±c± o liczbie porcji, a wyjmowanie bêdzie j± zmniejszaæ (np. metod± <TT>void pobierz() </TT>).
<LI>W przypadku porcji ró¿nych wielko¶ci powy¿sze metody powinny mieæ argument typu <TT>int</TT>.
<LI>W trudniejszym przypadku, bufor zawiera tablicê obiektów klasy <TT>Porcja</TT>. Porcje mog± byæ ró¿nej wielko¶ci.
<LI>Producent jest w±tkiem opartym na obiekcie klasy <TT>Producent</TT>. W trakcie dzia³ania, w pêtli wykonuje nastêpuj±ce operacje:
<OL type="i">
<LI>produkuje porcjê (w praktyce zasypia na jaki¶ czas)
<LI>wstawia j± do bufora</LI>
</OL>
<LI>Konsument jest w±tkiem opartym na obiekcie klasy <TT>Konsument</TT>. W trakcie dzia³ania, w pêtli wykonuje nastêpuj±ce operacje:
<OL type="i">
<LI>pobiera porcjê z bufora (je¶li jest pusty, to czeka)
<LI>konsumuje porcjê (w praktyce zasypia na jaki¶ czas)</LI>
</OL>
<LI>W metodzie <TT>main(...)</TT> nale¿y uruchomiæ w±tki producenta, konsumenta i bufora.
<LI>Je¶li bufor jest pusty, to konsument czaka na pojawienie siê towaru.
<LI>Je¶li bufor jest pe³ny, to producent czeka na zwolnienie miejsca na porcjê (dotyczy przypadku bufora ograniczonego).</LI>
</UL>
<H3>Uwagi</H3>
<UL>
<LI>Program powinien w trakcie dzia³ania wyprowadzaæ na konsolê du¿o informacji diagnostycznych, aby mo¿na by³o ¶ledziæ jego zachowanie.
<LI>Celem zadania jest zapewnienie w³a¶ciwej synchronizacji w±tków, przy czym:
<OL type="a">
<LI>Nie wolno z góry zak³adaæ nic na temat kolejno¶ci wk³adania/wyjmowania z bufora.
<LI>Nie wolno dopu¶ciæ do zjawiska blokady, kiedy ¿aden z w±tków nie mo¿e wykonaæ akcji. Takie zjawisko mo¿e zaj¶æ, je¶li pope³ni siê b³êdy logiczne w synchronizacji w±tków.
<LI>Nie wolno dopu¶ciæ do zjawiska zag³odzenia jakiegokolwiek w±tku, kiedy jest on ignorowany w konkurowaniu o dostêp do bufora. W zasadzie zapewnia to w³a¶ciwie u¿yta synchronizacja.</LI>
</OL>
<LI>Nie mo¿na doprowadziæ do sytuacji, gdy bufor bêdzie mia³ liczbê porcji mniejsz± ni¿ 0. Je¶li bufor ma ograniczon± pojemno¶æ, to nie mo¿e siê przepe³niæ.</LI>
</UL>
<P><I>Problem producenta-kosumenta</I> jest klasycznym przyk³adem z teorii wspó³bie¿no¶ci. Wiele praktycznych sytuacji, w których konieczne jest u¿ycie mechanizmów wspó³bie¿no¶ci sprowadza siê do tego schematu - dlatego warto go g³êbiej zrozumieæ.</P>
<P class="HTMLPreformatted1"><SPAN lang="EN-US" style="color:purple"><B style="mso-bidi-font-weight:normal">&nbsp;</B><B style="mso-bidi-font-weight: normal; color: purple">Przyk³ad programu producent-konsument:</B><B style="mso-bidi-font-weight:normal"><o:p>
</o:p>
</B></SPAN></P>
<TABLE border="1" cellspacing="0" cellpadding="0" bgcolor="#f3f3f3" style="background:
 #F3F3F3;border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0cm 5.4pt 0cm 5.4pt">
<TR>
<TD width="614" valign="top" style="width:460.6pt;border:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt">
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple">class ProdConsDemo {<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple">&nbsp;<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>int buffer = 0;<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>final Object lock = new Object();<o:p>
</o:p>
<SPAN style="mso-spacerun: yes">&nbsp; </SPAN><o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>class Consumer implements Runnable {<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><SPAN lang="EN-US" style="color:purple"><B style="mso-bidi-font-weight:normal"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>int volume;</B><B style="mso-bidi-font-weight: normal; color: purple"> //wielko¶æ konsumpcji</B><B style="mso-bidi-font-weight:normal"><o:p>
</o:p>
<o:p>
</o:p>
</B></SPAN></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Consumer(int v) { volume = v; }<o:p>
</o:p>
<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>public void run(){<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>while(true){<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>synchronized(lock){</SPAN><SPAN lang="EN-US" style="color:green">//!</SPAN><SPAN lang="EN-US" style="color:purple"><o:p>
</o:p>
</SPAN><SPAN style="mso-spacerun: yes; color: purple" lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN><SPAN lang="EN-US" style="color:
  green"><SPAN style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>while(buffer &lt; volume){<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>try { lock.wait(); }<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>catch(InterruptedException e){ }<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>}<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>buffer -= volume;<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>} </SPAN><SPAN lang="EN-US" style="color:green">//synchronized(lock)<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>} </SPAN><SPAN lang="EN-US" style="color:green">//while</SPAN><SPAN lang="EN-US" style="color:purple"><o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>} </SPAN><SPAN lang="EN-US" style="color:green">//run()</SPAN><SPAN lang="EN-US" style="color:purple"><o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>} </SPAN><SPAN lang="EN-US" style="color:green">//class Consumer</SPAN><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN><o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1">&nbsp;<B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><o:p>
</o:p>
</SPAN></B></P>
</TD>
</TR>
</TABLE>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple">&nbsp;<o:p>
</o:p>
</SPAN></B></P>
<TABLE border="1" cellspacing="0" cellpadding="0" bgcolor="#f3f3f3" style="background:
 #F3F3F3;border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0cm 5.4pt 0cm 5.4pt">
<TR>
<TD width="614" valign="top" style="width:460.6pt;border:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt">
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple">&nbsp;<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple">class Producer implements Runnable {<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><SPAN lang="EN-US" style="color:purple"><B style="mso-bidi-font-weight:normal"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>int volume;</B><B style="mso-bidi-font-weight: normal; color: purple"> //wielko¶æ produkcji</B><B style="mso-bidi-font-weight:normal"><o:p>
</o:p>
</B></SPAN></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Producer(int v)<o:p>
</o:p>
<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>{<SPAN style="mso-spacerun: yes"> </SPAN>volume = v;<o:p>
</o:p>
<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>}<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>public void run(){<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>while(true){<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>synchronized(lock){<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>buffer += volume;<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>lock.notify();<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>}<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>}<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>}<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>}<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>ProdConsDemo()<o:p>
</o:p>
<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>{<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>new Thread(new Producer(1)).start();<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>new Thread(new Producer(2)).start();<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>new Thread(new Consumer(1)).start();<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>new Thread(new Consumer(2)).start();<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN>new Thread(new Consumer(3)).start();<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>}<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN lang="EN-US" style="color:purple"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>public static void main(String[] args)<o:p>
</o:p>
</SPAN><SPAN style="mso-spacerun: yes; color: purple" lang="EN-US">&nbsp;&nbsp;&nbsp; </SPAN><SPAN style="color:purple;mso-ansi-language:
  PL">{<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN style="color:purple;mso-ansi-language:PL"><SPAN style="mso-spacerun:
  yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>new ProdConsDemo();<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN style="color:purple;mso-ansi-language:PL"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>}<o:p>
</o:p>
</SPAN></B></P>
<P class="HTMLPreformatted1"><B style="mso-bidi-font-weight:normal"><SPAN style="color:purple;mso-ansi-language:PL">}<o:p>
</o:p>
</SPAN></B></P>
<P class="NormalWeb1">&nbsp;<SPAN style="mso-ansi-language:PL"><o:p>
</o:p>
</SPAN></P>
</TD>
</TR>
</TABLE>
<HR>
<P class="NormalWeb1"><B><FONT color="#0000FF" size="4">Zadanie-3: dane meteorologiczne (max. 10p)</FONT></B></P>
Napisaæ program symuluj±cy przetwarzanie danych meteorologicznych.<BR>Na program sk³ada siê m.in. w±tek generowania danych, który losowo pobiera z tablicy krajów nazwê kraju, z tablicy dat - datê, a z tablicy temperatur dwie liczby: temperaturê w dzien i w nocy.<BR>Z&nbsp;tych danych formuje &quot;rekord&quot;: kraj data temp_w_dzien temp_w_nocy.<BR><BR>Dla ka¿dego kraju dzia³a&nbsp; w±tek odbioru danych, który od w±tku-generatora otrzymuje&nbsp; kolejne rekordy dla danego kraju i zapisuje je do pliku o nazwie: nazwa_kraju.temp <SPAN style="FONT-WEIGHT: bold">w postaci &nbsp;binarnej</SPAN>.<BR><BR>Inny w±tek - kontroler ma zapewniaæ:<BR>
<UL>
<LI>liczenie dotychczasowej (czyli na danych dot±d zapisanych) ¶redniej temperatury dla podanego kraju
<LI>koñczenie pracy wszystkich w±tków.</LI>
</UL>
Operacje te podajemy w dialogu wej¶ciowym w w±tku-kontrolerze.<p>Zapewniæ prost± 
w oprogramowaniu komunikacjê miêdzy w±tkami np. przez potoki 
(PipedInputStream,PipedOutputStream)<BR>
</p>
<HR>
<HR>
</body></html>